openapi: 3.0.1
info:
  title: DevDojo Anime Service API
  version: v1
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /v1/producers:
    get:
      tags:
        - producer-controller
      operationId: findAllProducers
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProducerGetResponse'
      security:
        - basicAuth: []
    put:
      tags:
        - producer-controller
      operationId: replaceProducer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProducerPutRequest'
        required: true
      responses:
        '200':
          description: OK
      security:
        - basicAuth: []
    post:
      tags:
        - producer-controller
      operationId: createProducer
      parameters:
        - name: x-api-key
          in: header
          schema:
            type: string
        - name: x-api-teste
          in: header
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProducerPostRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProducerGetResponse'
      security:
        - basicAuth: []
  /v1/animes:
    get:
      tags:
        - anime-controller
      operationId: findAllAnimes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnimeGetResponse'
      security:
        - basicAuth: []
    put:
      tags:
        - anime-controller
      operationId: updateAnime
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimePutRequest'
        required: true
      responses:
        '200':
          description: OK
      security:
        - basicAuth: []
    post:
      tags:
        - anime-controller
      operationId: createAnime
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimePostRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AnimePostResponse'
      security:
        - basicAuth: []
  /v1/producers/{producerId}:
    get:
      tags:
        - producer-controller
      operationId: findProducerById
      parameters:
        - name: producerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProducerGetResponse'
      security:
        - basicAuth: []
    delete:
      tags:
        - producer-controller
      operationId: deleteProducerById
      parameters:
        - name: producerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
      security:
        - basicAuth: []
  /v1/producers/find:
    get:
      tags:
        - producer-controller
      operationId: findProducerByName
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProducerGetResponse'
      security:
        - basicAuth: []
  /v1/connection:
    get:
      tags:
        - connection-controller
      operationId: getConnection
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Connection'
  /v1/animes/{id}:
    get:
      tags:
        - anime-controller
      operationId: findAnimeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AnimeGetResponse'
      security:
        - basicAuth: []
    delete:
      tags:
        - anime-controller
      operationId: deleteAnimeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
      security:
        - basicAuth: []
  /v1/animes/paginated:
    get:
      tags:
        - anime-controller
      operationId: findAllAnimesPaginated
      x-spring-paginated: true
      parameters:
        - name: page
          in: query
          description: Zero-based page index (0..N)
          required: false
          schema:
            minimum: 0
            type: integer
            default: 0
        - name: size
          in: query
          description: The size of the page to be returned
          required: false
          schema:
            minimum: 1
            type: integer
            default: 20
        - name: sort
          in: query
          description: 'Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.'
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAnimeGetResponse'
      security:
        - basicAuth: []
  /v1/animes/find:
    get:
      tags:
        - anime-controller
      operationId: findAnimeByName
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AnimeGetResponse'
      security:
        - basicAuth: []
components:
  schemas:
    ProducerPutRequest:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          x-field-extra-annotation: "@jakarta.validation.constraints.NotNull(message=\"O id não pode ser nulo\")"
        name:
          type: string
          x-field-extra-annotation: "@jakarta.validation.constraints.NotBlank(message=\"O nome não pode estar em branco\")"
    AnimePutRequest:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          x-field-extra-annotation: "@jakarta.validation.constraints.NotNull(message=\"O id não pode ser nulo\")"
        name:
          type: string
          x-field-extra-annotation: "@jakarta.validation.constraints.NotBlank(message=\"O nome não pode estar em branco\")"
    ProducerPostRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          x-field-extra-annotation: "@jakarta.validation.constraints.NotBlank(message=\"O nome não pode estar em branco\")"
    ProducerGetResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        createdAt:
          type: string
          format: date-time
    AnimePostRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          x-field-extra-annotation: "@jakarta.validation.constraints.NotBlank(message=\"O nome não pode estar em branco\")"
    AnimePostResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Connection:
      type: object
      properties:
        host:
          type: string
        username:
          type: string
        password:
          type: string
    AnimeGetResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: overlord
    PageAnimeGetResponse:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/AnimeGetResponse'
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        paged:
          type: boolean
        unpaged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
    SortObject:
      type: object
      properties:
        direction:
          type: string
        nullHandling:
          type: string
        ascending:
          type: boolean
        property:
          type: string
        ignoreCase:
          type: boolean
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
